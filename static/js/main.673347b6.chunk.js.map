{"version":3,"sources":["decoder.js","app.js","serviceWorker.js","index.js"],"names":["Decoder","name","type","className","rows","Convrtr","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAoBeA,G,gBAhBC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KACtB,OACE,yBAAKC,UAAU,aACb,0BAAMA,UAAU,qBAAqBF,GACrC,8BAAUG,KAAK,MACf,yBAAKD,UAAU,WACb,4BAAQA,UAAS,yBAAoBD,IAASA,GAC9C,yBAAKC,UAAU,gBACb,4BAAQA,UAAU,4BAAlB,KACA,4BAAQA,UAAU,4BAAlB,U,MCgBKE,MAxBf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,4BAAQH,UAAU,eAChB,0BAAMA,UAAU,cAAhB,WACA,0BAAMA,UAAU,kBAAhB,8BAEF,0BAAMA,UAAU,gBACd,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAASF,KAAK,OAAOC,KAAK,WAC1B,kBAAC,EAAD,CAASD,KAAK,SAASC,KAAK,WAC5B,kBAAC,EAAD,CAASD,KAAK,MAAMC,KAAK,WACzB,kBAAC,EAAD,CAASD,KAAK,SAASC,KAAK,WAC5B,kBAAC,EAAD,CAASD,KAAK,UAAUC,KAAK,WAC7B,kBAAC,EAAD,CAASD,KAAK,UAAUC,KAAK,WAC7B,kBAAC,EAAD,CAASD,KAAK,QAAQC,KAAK,WAC3B,kBAAC,EAAD,CAASD,KAAK,QAAQC,KAAK,WAC3B,kBAAC,EAAD,CAASD,KAAK,YAAYC,KAAK,eCVrBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.673347b6.chunk.js","sourcesContent":["import React from 'react';\nimport './css/decoder.scss';\nimport './css/buttons.scss';\n\nconst Decoder = ({name, type}) => {\n  return (\n    <div className=\"grid-item\">\n      <span className=\"grid-item--header\">{name}</span>\n      <textarea rows=\"9\"></textarea>\n      <div className=\"toolbar\">\n        <button className={`button button--${type}`}>{type}</button>\n        <div className=\"button-group\">\n          <button className=\"button button--secondary\">D</button>\n          <button className=\"button button--secondary\">C</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Decoder;\n","import React from 'react';\nimport Decoder from './decoder';\nimport './css/app.scss';\nimport './css/buttons.scss';\n\nfunction Convrtr() {\n  return (\n    <React.Fragment>\n      <header className=\"app--header\">\n        <span className=\"app--title\">Convrtr</span>\n        <span className=\"app--sub-title\">For everlost and Gorllo's</span>\n      </header>\n      <main className=\"app--wrapper\">\n        <div className=\"app--grid\">\n          <Decoder name=\"Text\" type=\"encode\" />\n          <Decoder name=\"Binary\" type=\"decode\" />\n          <Decoder name=\"Hex\" type=\"decode\" />\n          <Decoder name=\"Base64\" type=\"decode\" />\n          <Decoder name=\"Decimal\" type=\"decode\" />\n          <Decoder name=\"Reverse\" type=\"decode\" />\n          <Decoder name=\"Rot13\" type=\"decode\" />\n          <Decoder name=\"Morse\" type=\"decode\" />\n          <Decoder name=\"Morsenary\" type=\"decode\" />\n        </div>\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default Convrtr;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Convrtr from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Convrtr />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}